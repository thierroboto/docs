{
  "openapi": "3.0.1",
  "info": {
    "title": "Winston AI API",
    "description": "Winston AI API specification",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.1"
  },
  "servers": [
    {
      "url": "https://api.gowinston.ai/functions/v1"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/predict": {
      "post": {
        "description": "The Human Score is a metric used by Winston AI to estimate the likelihood that a given piece of content was generated by an AI tool versus being written by a human.",
        "requestBody": {
          "description": "test",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Predict"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Prediction response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Predict-response"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/plagiarism": {
      "post": {
        "description": "Winston AI's plagiarism API is a powerful tool designed to check text for plagiarism by scouring the internet for similar content. It queries multiple websites and compares the input text with the content found on these websites. This can be particularly useful in academic settings, content creation, legal scenarios or any other situation where originality of content is required.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Plagiarism"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Plagiarism response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plagiarism-response"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/image-detection": {
      "post": {
        "description": "Our image detection feature enables AI-generated image detection by verifying image metadata and using a machine learning system trained to differentiate between human and AI-generated images.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImageDetection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Image detection Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageDetection-Response"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Predict": {
        "type": "object",
        "required": ["text"],
        "properties": {
          "text": {
            "description": "The text to scan. It is required except if you supply a website or a file. Minimum 300 characters. Texts under 600 characters may produce unreliable results and should be avoided. Maximum 100 000 characters per request.",
            "type": "string"
          },
          "file": {
            "description": "A file to scan. If you supply a file, the API will scan the content of the file. The file must be in plain .doc or .docx format. The file has priority over the text, so if you give a text and a file, it's the file that will be scanned.",
            "type": "string"
          },
          "website": {
            "description": "A website URL to scan. If you supply a website, the API will fetch the content of the website and scan it. The website must be publicly accessible. It's important to know that the website has priority over the text and the file, so if you give a text, a file and a website, it's the website that will be scanned.",
            "type": "string"
          },
          "version": {
            "description": "The model version to use. Our latest and most accurate version is \"3.0\". Using \"latest\" will make sure you are always using the latest version. Options: 3.0, 2.0, latest. Default: 2.0.",
            "type": "string"
          },
          "sentences": {
            "description": "Whether the response should include an array of sentences and their scores. Default: true.",
            "type": "boolean"
          },
          "language": {
            "description": "2 letter language code. At this time, the API is only available in english (en), french (fr), spanish (es), portuguese (pt), netherlands (nl) and german (de). default: en. Optional.",
            "type": "string"
          }
        }
      },
      "Predict-response": {
        "type": "object",
        "properties": {
          "status": {
            "description": "This is a standard HTTP status code. A 200 status means the request was successful.",
            "type": "integer"
          },
          "score": {
            "description": "A \"human\" score between 0 and 100. A low score means our system believes that the text is written by AI, and a higher score means that the system believes that the text is written by a Human.",
            "type": "boolean"
          },
          "sentences": {
            "description": "This is an array of sentence objects. Each object contains two fields: text and score. Please note that assessments on smaller samples are less accurate than the general score.",
            "type": "object",
            "properties": {
              "text": {
                "description": "The text field contains the actual text of the sentence that was analyzed.",
                "type": "string"
              },
              "score": {
                "description": "The score field within each sentence object indicates the sentiment score assigned to that particular sentence by the AI.",
                "type": "integer"
              }
            }
          },
          "input": {
            "description": "The type of input we scan based on the input you provided. It can be `text | file | website` .",
            "type": "string"
          },
          "credits_used": {
            "description": "The credits_used field represents the number of credits consumed for processing your request. Each word that is processed by the API consumes one credit.",
            "type": "integer"
          },
          "credits_remaining": {
            "description": "The credits_remaining field shows how many credits you have left in your account after your request has been processed.",
            "type": "integer"
          }
        }
      },
      "Plagiarism": {
        "required": ["text"],
        "type": "object",
        "properties": {
          "text": {
            "description": "The text to scan. Minimum 300 characters. Maximum 100 000 characters.",
            "type": "string"
          }
        }
      },
      "Plagiarism-response": {
        "type": "object",
        "properties": {
          "status": {
            "description": "This is a standard HTTP status code. A 200 status means the request was successful.",
            "type": "integer"
          },
          "results": {
            "description": "The results field is an array which contains one or more objects, each corresponding to a different website where matching content has been found. Each object includes the following fields:",
            "type": "object",
            "properties": {
              "title": {
                "description": "The title field provides the title of the webpage where matching content has been found.",
                "type": "string"
              },
              "url": {
                "description": "The url field gives the URL of the webpage where matching content has been found.",
                "type": "string"
              },
              "excerpts": {
                "description": "The excerpts field is an array which contains snippets of text from the webpage that match the input text.",
                "type": "object"
              },
              "date": {
                "description": "The date of publication of the result. The date format may vary from one result to another.",
                "type": "string"
              }
            }
          },
          "results_count": {
            "description": "The results_count field indicates the total number of matching websites found by the Plagiarism API.",
            "type": "integer"
          },
          "credits_used": {
            "description": "The credits_used field represents the number of credits consumed for processing your request. Each word that is processed by the API consumes two credits.",
            "type": "integer"
          },
          "credits_remaining": {
            "description": "The credits_remaining field shows how many credits you have left in your account after your request has been processed.",
            "type": "integer"
          }
        }
      },
      "ImageDetection": {
        "required": ["url"],
        "type": "object",
        "properties": {
          "url": {
            "description": "The URL of the image to scan. The image must be publicly accessible and must be a valid url. We only accept `JPG/JPEG/PNG/WEBP` images.",
            "type": "string"
          },
          "version": {
            "description": "The model version to use. Our latest and most accurate version is \"1.0\". Using \"latest\" will make sure you are always using the latest version. Options: 1.0, latest. Default: 1.0.",
            "type": "string"
          }
        }
      },
      "ImageDetection-Response": {
        "type": "object",
        "properties": {
          "score": {
            "description": "The human score that the image is likely to be generated by a human. A low score means our system believes that the image is generated by AI, and a higher score means that the system believes that the image is generated by a Human. The score is between 0 and 100. 0 for AI and 100 for Human.",
            "type": "integer"
          },
          "human_probability": {
            "description": "The human probability that the image is likely to be generated by a human. The probability is between 0 and 1.",
            "type": "integer"
          },
          "ai_probability": {
            "description": "The AI probability that the image is likely to be generated by an AI. The probability is between 0 and 1.",
            "type": "integer"
          },
          "version": {
            "description": "The model version used to generate the prediction.",
            "type": "string"
          },
          "mime_type": {
            "description": "The mime type of the image.",
            "type": "string"
          },
          "c2pa": {
            "description": "The Content Provenance and Authenticity (C2PA) metadata of the image. For more information about what is C2PA, please visit `https://c2pa.org/`",
            "type": "object",
            "properties": {
              "active_manifest": {
                "description": "The last manifest in the list of manifests which is the one with the set of content bindings that are able to be validated.",
                "type": "object",
                "properties": {
                  "vendor": {
                    "type": "string",
                    "description": "Typically an Internet domain name (without the TLD) for the vendor (i.e. `adobe`, `nytimes`). If provided this will be used as a prefix on generated manifest labels."
                  },
                  "claim_generator": {
                    "type": "string",
                    "description": "A UserAgent string that will let a user know what software/hardware/system produced this Manifest - names should not contain spaces (defaults to c2patool)."
                  },
                  "title": {
                    "type": "string",
                    "description": "A human-readable string to be displayed as the title for this Manifest (defaults to the name of the file this manifest was embedded in)."
                  },
                  "credentials": {
                    "type": "object",
                    "description": "An array of W3C verifiable credentials objects defined in the c2pa assertion specification. Section 7."
                  },
                  "thumbnail": {
                    "type": "object",
                    "format": "JSON resource definition",
                    "description": "An object with an identifier field with a file path, and a format with the mime type of that file."
                  },
                  "ingredients": {
                    "type": "array",
                    "format": "Array of JSON ingredients, such as those produced with the --ingredient option",
                    "description": "Ingredients that were used to modify the asset referenced by this Manifest (if any)."
                  },
                  "ingredient_paths": {
                    "type": "array",
                    "format": "Array of local file system paths",
                    "description": "File paths to assets that were used to modify the asset referenced by this Manifest (if any). This may be a JSON Ingredient definition file."
                  },
                  "assertions": {
                    "type": "object",
                    "description": "Objects with label, and data - standard c2pa labels must match values as defined in the c2pa assertion specification."
                  },
                  "alg": {
                    "type": "string",
                    "format": "Local file system path",
                    "description": "Signing algorithm: one of [ ps256 | ps384 | ps512 | es256 | es384 | es512 | ed25519]. Defaults to es256."
                  },
                  "ta_url": {
                    "type": "string",
                    "format": "http URL",
                    "description": "A URL to an RFC3161 compliant Time Stamp Authority. If missing there will no secure timestamp."
                  },
                  "private_key": {
                    "type": "string",
                    "format": "Local file system path",
                    "description": "File path to a private key file."
                  },
                  "sign_cert": {
                    "type": "string",
                    "format": "Local file system path",
                    "description": "File path to signing cert file."
                  }
                }
              },
              "manifests": {
                "type": "object",
                "description": "A collection of manifests attached to an asset. Each manifest contains information about the provenance of the asset. Creating or editing an asset using a C2PA-compliant device or tool (for example Adobe Photoshop) adds a new manifest to the manifest store. See more information at the C2PA website (https://c2pa.org/). ",
                "properties": {
                  "<manifest_key>": {
                    "type": "object",
                    "properties": {
                      "vendor": {
                        "type": "string",
                        "description": "Typically an Internet domain name (without the TLD) for the vendor (i.e. `adobe`, `nytimes`). If provided this will be used as a prefix on generated manifest labels."
                      },
                      "claim_generator": {
                        "type": "string",
                        "description": "A UserAgent string that will let a user know what software/hardware/system produced this Manifest - names should not contain spaces (defaults to c2patool)."
                      },
                      "title": {
                        "type": "string",
                        "description": "A human-readable string to be displayed as the title for this Manifest (defaults to the name of the file this manifest was embedded in)."
                      },
                      "credentials": {
                        "type": "object",
                        "description": "An array of W3C verifiable credentials objects defined in the c2pa assertion specification. Section 7."
                      },
                      "thumbnail": {
                        "type": "object",
                        "format": "JSON resource definition",
                        "description": "An object with an identifier field with a file path, and a format with the mime type of that file."
                      },
                      "ingredients": {
                        "type": "array",
                        "format": "Array of JSON ingredients, such as those produced with the --ingredient option",
                        "description": "Ingredients that were used to modify the asset referenced by this Manifest (if any)."
                      },
                      "ingredient_paths": {
                        "type": "array",
                        "format": "Array of local file system paths",
                        "description": "File paths to assets that were used to modify the asset referenced by this Manifest (if any). This may be a JSON Ingredient definition file."
                      },
                      "assertions": {
                        "type": "object",
                        "description": "Objects with label, and data - standard c2pa labels must match values as defined in the c2pa assertion specification."
                      },
                      "alg": {
                        "type": "string",
                        "format": "Local file system path",
                        "description": "Signing algorithm: one of [ ps256 | ps384 | ps512 | es256 | es384 | es512 | ed25519]. Defaults to es256."
                      },
                      "ta_url": {
                        "type": "string",
                        "format": "http URL",
                        "description": "A URL to an RFC3161 compliant Time Stamp Authority. If missing there will no secure timestamp."
                      },
                      "private_key": {
                        "type": "string",
                        "format": "Local file system path",
                        "description": "File path to a private key file."
                      },
                      "sign_cert": {
                        "type": "string",
                        "format": "Local file system path",
                        "description": "File path to signing cert file."
                      }
                    }
                  }
                }
              }
            }
          },
          "exif": {
            "description": "The exif metadata of the image. We currently retrieve the XMP, EXIF, and IPTC metadata of the image to help us determine if the image was AI generated. For more information about the IPTC metadata, please visit `https://iptc.org/`",
            "type": "object",
            "properties": {
              "DateCreated": {
                "type": "string",
                "description": "Designates the date and optionally the time the content of the image was created rather than the date of the creation of the digital representation."
              },
              "Description": {
                "description": "A textual description, including captions, of the image.",
                "type": "string"
              },
              "Headline": {
                "description": "A brief synopsis of the caption. Headline is not the same as Title.",
                "type": "string"
              },
              "MaxAvailWidth": {
                "type": "string",
                "description": "The maximum available width in pixels of the original photo from which this photo has been derived by downsizing."
              },
              "MaxAvailHeight": {
                "type": "string",
                "description": "The maximum available height in pixels of the original photo from which this photo has been derived by downsizing."
              },
              "ImageRating": {
                "type": "string",
                "description": "Rating of the image by its user or supplier"
              },
              "DescriptionWriter": {
                "type": "string",
                "description": "Identifier or the name of the person(s) involved in writing, editing or correcting the Description, Alt Text (Accessibility), or Extended Description (Accessibility) of the image."
              },
              "Genre": {
                "type": "string",
                "description": "Artistic, style, journalistic, product or other genre(s) of the image (expressed by a term from any Controlled Vocabulary)"
              },
              "RightsUsageTerms": {
                "type": "string",
                "description": "The licensing parameters of the image expressed in free-text."
              },
              "SceneCode": {
                "type": "string",
                "description": "Describes the scene of a photo content. Specifies one ore more terms from the IPTC Scene-NewsCodes. Each Scene is represented as a string of 6 digits in an unordered list."
              },
              "AdditionalModelInformation": {
                "type": "string",
                "description": "Information about the ethnicity and other facets of the model(s) in a model-released image."
              },
              "Creator": {
                "type": "string",
                "description": "Contains the name of the photographer, but in cases where the photographer should not be identified the name of a company or organisation may be appropriate."
              },
              "CreditLine": {
                "type": "string",
                "description": "The credit to person(s) and/or organisation(s) required by the supplier of the image to be used when published. This is a free-text field."
              },
              "CopyrightNotice": {
                "type": "string",
                "description": "Contains any necessary copyright notice for claiming the intellectual property for this photograph and should identify the current owner of the copyright for the photograph. Other entities like the creator of the photograph may be added in the corresponding field. Notes on usage rights should be provided in Rights usage terms."
              },
              "ImageSupplier": {
                "type": "string",
                "description": "Identifies the most recent supplier of the image, who is not necessarily its owner or creator."
              },
              "Locationcreated": {
                "type": "string",
                "description": "The location the photo was taken."
              },
              "MinorModelAgeDisclosure": {
                "type": "string",
                "description": "Age of the youngest model pictured in the image, at the time that the image was made."
              },
              "WebStatementofRights": {
                "type": "string",
                "description": "URL referencing a web resource providing a statement of the copyright ownership and usage rights of the image."
              },
              "ModelAge": {
                "type": "string",
                "description": "Age of the human model(s) at the time this image was taken in a model released image."
              },
              "ImageSupplierImageID": {
                "type": "string",
                "description": "Optional identifier assigned by the Image Supplier to the image."
              },
              "LinkedEncodedRightsExpression": {
                "type": "string",
                "description": "A linked rights expression using any rights expression language."
              },
              "DataMining": {
                "type": "string",
                "description": "Data mining prohibition or permission, optionally with constraints."
              },
              "Artwork": {
                "type": "string",
                "description": "A set of metadata about artwork or an object in the image"
              },
              "ImageRegistryEntry": {
                "type": "string",
                "description": "Both a Registry Item Id and a Registry Organisation Id to record any registration of this digital image with a registry."
              },
              "City": {
                "type": "string",
                "description": "Name of the city of the location shown in the image. This element is at the third level of a top-down geographical hierarchy."
              },
              "CodeofOrganisationFeaturedintheImage": {
                "type": "string",
                "description": "Code from a controlled vocabulary for identifying the organisation or company which is featured in the image."
              },
              "EventIdentifier": {
                "type": "string",
                "description": "Identifier(s) of the specific event at which the photo was taken"
              },
              "EventName": {
                "type": "string",
                "description": "Names or describes the specific event at which the photo was taken."
              },
              "Contributor": {
                "type": "string",
                "description": "Party or parties (person or organisation) which contributed to the image, refinement by the role attribute."
              },
              "CopyrightOwner": {
                "type": "string",
                "description": "Owner or owners of the copyright in the licensed image."
              },
              "Country": {
                "type": "string",
                "description": "Full name of the country of the location shown in the image. This element is at the top/first level of a top-down geographical hierarchy. The full name should be expressed as a verbal name and not as a code, a code should go to the element CountryCode"
              },
              "DigitalSourceType": {
                "type": "string",
                "description": "Name of the organisation or company which is featured in the image."
              },
              "PropertyReleaseId": {
                "type": "string",
                "description": "Identifier(s) of a Property Release document."
              },
              "PropertyReleaseStatus": {
                "type": "string",
                "description": "Summarises the availability and scope of property releases authorising usage of the properties appearing in the photograph."
              },
              "NameofOrganisationFeaturedintheImage": {
                "type": "string",
                "description": "Name of the organisation or company which is featured in the image."
              },
              "Source": {
                "type": "string",
                "description": "The name of a person or party who has a role in the content supply chain. This could be an agency, a member of an agency, an individual or a combination. Source could be different from Creator and from the entities in the Copyright Notice."
              },
              "DigitalImageGUID": {
                "type": "string",
                "description": "Globally unique identifier for this digital image. It is created and applied by the creator of the digital image at the time of its creation . This value shall not be changed after that time."
              },
              "Licensor": {
                "type": "string",
                "description": "A person or company that should be contacted to obtain a licence for using the item or who has licensed the item."
              },
              "keywords": {
                "type": "array",
                "description": "Keywords to express the subject of the image. Keywords may be free text and don’t have to be taken from a controlled vocabulary. Codes from the controlled vocabulary IPTC Subject NewsCodes must go to the Subject Code field."
              },
              "ImageCreator": {
                "type": "object",
                "description": "Creator or creators of the image"
              },
              "Instructions": {
                "type": "string",
                "description": "Any number of instructions from the provider or creator to the receiver of the image"
              },
              "Title": {
                "type": "string",
                "description": "A shorthand reference for the digital image. Title provides a short human readable name which can be a text and/or numeric reference. It is not the same as Headline."
              }
            }
          },
          "ai_watermark_detected": {
            "description": "Whether an AI watermark was detected in the image.",
            "type": "boolean"
          },
          "ai_watermark_issuers": {
            "description": "The list of AI watermark issuers detected in the image.",
            "type": "object"
          },
          "credits_used": {
            "description": "The credits_used field represents the number of credits consumed for processing your request. Each word that is processed by the API consumes two credits.",
            "type": "integer"
          },
          "credits_remaining": {
            "description": "The credits_remaining field shows how many credits you have left in your account after your request has been processed.",
            "type": "integer"
          }
        }
      },
      "Error": {
        "required": ["error"],
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
